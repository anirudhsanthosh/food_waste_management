// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id             Int             @id @default(autoincrement())
  uuid           String          @unique @default(uuid())
  email          String          @unique
  name           String?
  password       String
  posts          Post[]
  profile        Profile?
  role           String          @default("user")
  pickupRequests PickupRequest[]
  poll           Election[]
  vote           Vote[]
}

model PickupRequest {
  id          Int      @id @default(autoincrement())
  address     String
  status      String
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requestedBy User     @relation(fields: [user_id], references: [id])
  user_id     Int
}

model Election {
  id           Int              @id @default(autoincrement())
  title        String
  description  String
  status       String
  startingDate DateTime         @default(now())
  endingDate   DateTime         @default(now())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deleted      Boolean          @default(false)
  createdBy    User             @relation(fields: [user_id], references: [id])
  user_id      Int
  options      PollingOptions[]
  vote         Vote[]
}

model PollingOptions {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  optionOf    Election @relation(fields: [pollId], references: [id])
  pollId      Int
  vote        Vote[]
}

model Vote {
  id         Int             @id @default(autoincrement())
  votedBy    User            @relation(fields: [user_id], references: [id])
  user_id    Int
  votedIn    Election        @relation(fields: [electionId], references: [id])
  electionId Int
  voteFor    PollingOptions? @relation(fields: [optionId], references: [id])
  optionId   Int?

  @@unique([user_id, electionId])
}
